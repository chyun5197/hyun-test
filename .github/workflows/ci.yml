name: Spring Boot Gradle CICD

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/ci.yml'

permissions:
  contents: write

jobs:
  springboot-build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Create application.yml
        run: |
          touch ./src/main/resources/application.yml
          echo -e "${{secrets.APPLICATION}}" | base64 --decode > ./src/main/resources/application.yml
      - uses: actions/upload-artifact@v3
        with:
            name: application.yml
            path: ./src/main/resources/application.yml
            retention-days: 1

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Execute Gradle build
        run: ./gradlew clean build -i

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_HUB_TOKEN }}

      - name: Build Hobiday Server Image And Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/babpool-server-image:latest
          no-cache: true

#      - name: Create docker-compose.yml from secrets
#        run: |
#          touch ./docker-compose.yaml
#          echo -e "${{secrets.DOCKER_COMPOSE}}" | base64 --decode > ./docker-compose.yaml
#      - name: Upload docker-compose.yaml to Repo
#        uses: actions/upload-artifact@v3
#        with:
#          name: docker-compose.yaml
#          path: ./docker-compose.yaml
#          retention-days: 1

    # dockerfile을 통해 이미지를 빌드하고, 이를 docker repo로 push 합니다.
    # 이 때 사용되는 ${{ secrets.DOCKER_REPO }}/directors-dev 가 위에서 만든 도커 repository 입니다.
      - name: Docker build & push to docker repo
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/directors-dev .
          docker push ${{ secrets.DOCKER_REPO }}/directors-dev

      # appleboy/ssh-action@master 액션을 사용하여 지정한 서버에 ssh로 접속하고, script를 실행합니다.
      # script의 내용은 도커의 기존 프로세스들을 제거하고, docker repo로부터 방금 위에서 push한 내용을 pull 받아 실행하는 것입니다.
      # 실행 시, docker-compose를 사용합니다.
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        id: deploy
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/hyun-test
            docker-compose up -d
            docker image prune -f